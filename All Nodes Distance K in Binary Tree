class Solution {
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        List<Integer> ans = new ArrayList<Integer>();
        Map<TreeNode,TreeNode> hs = new HashMap<TreeNode,TreeNode>();
        dfs(root,hs,new TreeNode(-1));
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        q.add(target);
        List<TreeNode> poped = new ArrayList<TreeNode>();
        while(q.size()>0 && k>0) {
            int size = q.size();
            for(int i=0;i<size;i++) {
                TreeNode cur = q.poll();
                poped.add(cur);
                if(cur.left!=null && !poped.contains(cur.left))
                q.add(cur.left);
                if(cur.right!=null && !poped.contains(cur.right))
                q.add(cur.right);
                if(hs.get(cur).val !=-1 && !poped.contains(hs.get(cur)))
                q.add(hs.get(cur));
            }
            k--;
        }
        q.forEach(data -> ans.add(data.val));
        return ans;
    }
    public void dfs(TreeNode node, Map<TreeNode,TreeNode> map, TreeNode parent) {
        if(node == null )
        return;
        else {
            map.put(node,parent);
           dfs(node.left, map, node);
           dfs(node.right, map,node);
        }
    }
}
