DP : min cost climbing stairs Memoization
class Solution {
    public int minCostClimbingStairs(int[] cost) {
       int t[] = new int[cost.length+1];
       for(int i=0;i<t.length;i++) {
           t[i]=-1;
       }
       return Math.min(costly(cost,0,cost.length,t),costly(cost,1,cost.length,t)); 
    }
    public int costly(int[] cost, int n, int N, int t[]) {
        if(n >= N) {
          t[n] = 0;
          return 0;
        }
        else if(t[n] != -1)
        return t[n];
        else {
            if(n+1<=N && n+2<=N) {
             int l1 = cost[n] + costly(cost,n+1,N,t);
             int l2 = cost[n] + costly(cost,n+2,N,t);
             t[n] = Math.min(l1,l2);
             return Math.min(l1,l2);
            }
            else {
                t[n] = cost[n] + costly(cost,n+1,N,t);
             return cost[n] + costly(cost,n+1,N,t);
            }
        }
    }
}
