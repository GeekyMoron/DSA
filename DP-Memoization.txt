class Solution 
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
         // your code here 
         int t[][] = new int[n+1][W+1];
         Arrays.stream(t).forEach(t1 -> Arrays.fill(t1, -1));
         return cal(W,wt,val,n,t);
    }
    public static int cal(int W, int wt[], int val[], int n, int t[][])  {
         if(n==0 || W==0)
         return 0;
         if(t[n][W] != -1)
         return t[n][W];
         else  {
             if(wt[n-1]>W) {
                 t[n][W] = cal(W,wt,val,n-1,t);
                 return t[n][W];
             }
             else
             {
                 int l1 = val[n-1]  + cal(W-wt[n-1],wt,val,n-1,t);
                 int l2 = cal(W,wt,val,n-1,t);
                 if(l1>l2){
                     t[n][W] = l1;
                     return t[n][W];
                 }
                 else{
                     t[n][W] = l2;
                     return t[n][W];
                 }
                 
             }
         }
    }
}
