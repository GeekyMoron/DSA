class Solution 
{
    //Function to find minimum number of attempts needed in 
    //order to find the critical floor.
    static int eggDrop(int n, int k) 
	{
	    // Your code here
	    int t[][] = new int[n+1][k+1];
        Arrays.stream(t).forEach(t1 -> Arrays.fill(t1, -1));
	    return MCM(n,k,t);
	}
	 public static int MCM(int n, int K, int[][] t)
    {
        if(n==1)
        return K;
        if(K==0||K==1)
        return K;
        if(t[n][K]!=-1)
        return t[n][K];
        else {
            int min = Integer.MAX_VALUE;
            for(int k=1;k<K;k++) {
                int temp =  1 + Math.max(MCM(n-1,k-1,t),MCM(n,K-k,t));
                if(temp<min)
                min = temp;
            }
            t[n][K] = min;
            return min;
        }
    }
}
