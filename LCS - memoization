LCS - Memoization
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int n = text1.length();
        int m = text2.length();
        int t[][] = new int[n+1][m+1];
        Arrays.stream(t).forEach(t1 -> Arrays.fill(t1, -1));
        return lcs(text1,text2,n,m,t);
    }
    public int lcs(String text1,String text2 , int n, int m, int[][] t) {
     if(t[n][m] != -1)
     return t[n][m];
     else if(n==0||m==0) {
     t[n][m] = 0;
     return 0;
     }
     else if(text1.charAt(n-1) == text2.charAt(m-1)) {
     t[n][m] =  1 + lcs(text1,text2,n-1,m-1,t);
     return t[n][m];
     }
     else {
     t[n][m] = Math.max(lcs(text1,text2,n-1,m,t),lcs(text1,text2,n,m-1,t));
     return t[n][m];
     }
    }
}
