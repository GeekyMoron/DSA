class MinStack {
    Stack<Long> s;
    Long min;
    public MinStack() {
        s = new Stack<Long>();
    }
    
    public void push(int val) {
        Long value = Long.valueOf(val);
        if(s.size() == 0)
        {
            s.push(value);
            min = value;
        }
        else {
            if(min<=value)
            s.push(value);
            else{
                // send flag value to remember past minimum.
                //push 2 * val - min;
                s.push(2*value - min);
                min = value;
            }
        }
    }
    
    public void pop() {
        if(s.size()==0)
        return;
        // if we encounter any value that is less tahn min then it would be anomaly as we have sent new flag value
        else if(s.peek()<min)
        {
            // 2* val - min = data
            // data - 2*val = min
            min = 2* min - s.peek();
            s.pop();
        }
        else 
        s.pop();
    }
    
    public int top() {
        if(s.peek()<min) {
        return min.intValue();
        }
        else
        return s.peek().intValue();
    }
    
    public int getMin() {
        if(s.size()==0)
        return -1;
        else
        return min.intValue();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
