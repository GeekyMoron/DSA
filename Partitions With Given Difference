DP : Partitions With Given Difference
logic:
s1 + s2 = d -> given 
and we know s1+ s2 = sum of all array elements.
s1 = d-sum/2;

then we call no of subsets with given sum problem for s1:
public class Solution {
	public static int countPartitions(int n, int d, int[] arr) {
		int sum = 0;
		for(int i=0;i<arr.length;i++) {
			sum = sum +arr[i];
		}
        if((d+sum)%2 != 0) return 0;
		int s1 = (d + sum%1000000007)/2;
		return isSubsetSum(n, arr, s1);
	}
	static int isSubsetSum(int N, int arr[], int sum){
        // code here
        int t[][] = new int[N+1][sum+1];
        for(int i=0;i<=N;i++) {
            for(int j=0;j<=sum;j++) {
                if(i==0)
                t[i][j]=0;
                if(j==0)
                t[i][j]=1;
            }
        }
        for(int i=1;i<=N;i++) {
             for(int j=0;j<=sum;j++) {
                if(arr[i-1]>j)
                t[i][j] = t[i-1][j]%1000000007;
                else
                t[i][j] = (t[i-1][j] + t[i-1][j-arr[i-1]])%1000000007;
             }
        }
        return t[N][sum];
    }
}
