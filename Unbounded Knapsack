DP Top Down Approach for UnBounded KanpSack: 
class Solution 
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
         // initialise the matrix Base condition
         int t[][] = new int[n+1][W+1];
         for(int i=0;i<n+1;i++) {
             for(int j=0;j<W+1;j++) {
                 if(n==0||W==0)
                 t[i][j] = 0;
             }
         }
         //Code for induction step 
         for(int i=1;i<n+1;i++) {
             for(int j=1;j<W+1;j++) {
                 if(wt[i-1]>j)
                 t[i][j] = t[i-1][j];
                 else {
                     int l1 = val[i-1] + t[i][j-wt[i-1]]; // just change i-1 to i in 0/1 knapsack
                     int l2 = 0 + t[i-1][j];
                     if(l1>l2)
                     t[i][j] = l1;
                     else
                     t[i][j] =l2;
                 }
             }
         }
         return t[n][W];
    }
}
