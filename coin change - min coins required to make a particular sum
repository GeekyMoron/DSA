DP : coin change - min coins required to make a particular sum 
Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.
  class Solution {
    public int coinChange(int[] coins, int sum) {
        int N = coins.length;
        int t [][] = new int [N+1][sum+1];
        for(int i=0;i<=N;i++)
        {
           for(int j=0;j<=sum;j++) {
               if(i==0)
               t[i][j] = Integer.MAX_VALUE - 1; // to avoid overflow
               if(j==0)
               t[i][j] = 0;
           } 
        }
        
        for(int i=1;i<=N;i++)
        {
           for(int j=1;j<=sum;j++) {
               if(coins[i-1]>j)
               t[i][j] = t[i-1][j];
               else {
                   System.out.println("for " + i + " " + j + " " + t[i-1][j] +  " " + t[i][j-coins[i-1]]);
                   t[i][j] = Math.min(t[i-1][j] , t[i][j-coins[i-1]] +1);
               }
           } 
        } 
        if(t[N][sum]<=sum)
        return t[N][sum];
        else 
        return -1;
    }
    }
